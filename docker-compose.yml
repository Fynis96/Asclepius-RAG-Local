services:
  react-app:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true
    develop:
      watch:
        - path: ./frontend/src
          target: /app/src
          action: sync
        - path: ./frontend/public
          target: /app/public
          action: sync
    networks:
      - appnetwork
    depends_on:
      - fastapi-app

  fastapi-app:
    build: ./api/
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --reload
    develop:
      watch:
        - action: sync
          path: ./api
          target: /app
    ports:
      - "80:80"
    volumes:
      - ./api:/app
    environment:
      - PYTHONUNBUFFERED=${PYTHONBUFFERED}
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_DEFAULT_BUCKETS}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - QDRANT_HOST=${QDRANT_HOST}
      - QDRANT_PORT=${QDRANT_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      postgresql:
        condition: service_healthy
      
    restart: unless-stopped
    networks:
      - appnetwork

  ollama:
    image: ollama/ollama
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - /home/ollama:/root/.ollama
    restart: unless-stopped
    networks:
      - appnetwork
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgresql:
    image: postgres:13
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    shm_size: 128mb
    networks:
      - appnetwork
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 10s
      retries: 5

  qdrant:
    image: qdrant/qdrant
    restart: unless-stopped
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    expose:
      - "6333"
      - "6334"
      - "6335"
    volumes:
      - qdrant_data:/qdrant/storage
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    networks:
      - appnetwork

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - appnetwork
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
    command: server /data --console-address ":9001"

configs:
  qdrant_config:
    content: |
      log_level: INFO

networks:
  appnetwork:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  qdrant_data: